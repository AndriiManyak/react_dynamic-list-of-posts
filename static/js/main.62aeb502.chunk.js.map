{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/coments.js","components/CommentList/CommentList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","options","a","fetch","response","ok","Error","status","statusText","json","getUserPosts","userId","posts","data","filter","post","getPostDetail","postId","Loader","className","PostsList","openPost","selectedPostId","closePost","useState","setPosts","loading","setLoading","useEffect","loadPosts","postsFromServer","map","key","id","title","type","onClick","getPostComments","comments","comment","deleteComment","commentId","commentUrl","method","CommentList","updateComments","then","body","NewCommentForm","name","setName","email","setEmail","setBody","onSubmit","event","preventDefault","test","headers","JSON","stringify","addComment","placeholder","value","onChange","target","PostDetails","setPost","setComments","isCommentsVisible","setIsCommentVisible","loadPostDetails","loadComments","postFromServer","commentsFromServer","length","App","selectedUserId","setSelectedUserId","setSelectedPostId","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62aeb502.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}-${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId !== 0\n      ? posts.data.filter(post => post.userId === userId)\n      : posts.data\n  );\n};\n\nexport const getPostDetail = async(postId) => {\n  const post = await request(`/posts/${postId}`);\n\n  return post;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  openPost,\n  selectedPostId,\n  closePost,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadPosts();\n  }, [userId]);\n\n  const loadPosts = async() => {\n    setLoading(true);\n    const postsFromServer = await getUserPosts(userId);\n\n    setPosts(postsFromServer);\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {loading\n          ? (<Loader />)\n          : (\n            posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {\n                  selectedPostId === post.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={closePost}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => openPost(post.id)}\n                      >\n                        Open\n                      </button>\n                    )\n                }\n\n              </li>\n            ))\n          )\n\n        }\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  openPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  closePost: PropTypes.func.isRequired,\n};\n","import { remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.data.filter(comment => comment.postId === postId);\n};\n\nexport const deleteComment = (commentId) => {\n  const commentUrl = `/comments/${commentId}`;\n\n  return remove(commentUrl, { medthod: 'DELETE' });\n};\n\nexport const addComment = (postId, name, email, body) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { deleteComment } from '../../api/coments';\n\nexport const CommentList = ({ comments, updateComments }) => {\n  const removeComment = (commentId) => {\n    deleteComment(commentId)\n      .then(() => updateComments());\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => removeComment(comment.id)}\n          >\n            X\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { addComment } from '../../api/coments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    // eslint-disable-next-line max-len\n    const emailRegEx = /^(([^<>()\\\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!name || !body || !emailRegEx.test(email)) {\n      return;\n    }\n\n    addComment(postId, name, email, body)\n      .then(() => updateComments());\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostComments } from '../../api/coments';\nimport { getPostDetail } from '../../api/posts';\nimport { CommentList } from '../CommentList/CommentList';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isCommentsVisible, setIsCommentVisible] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    loadComments();\n  }, [selectedPostId]);\n\n  const loadPostDetails = async() => {\n    setLoading(true);\n    const postFromServer = await getPostDetail(selectedPostId);\n\n    setPost(postFromServer);\n    setLoading(false);\n  };\n\n  const loadComments = async() => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  };\n\n  const showComments = () => {\n    setIsCommentVisible(true);\n  };\n\n  const hideComments = () => {\n    setIsCommentVisible(false);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {\n        // eslint-disable-next-line no-nested-ternary\n        loading\n          ? (\n            <Loader />\n          )\n          : (post\n            ? (\n              <>\n                <h2>Post details:</h2>\n\n                <section className=\"PostDetails__post\">\n                  <p>{post.title}</p>\n                </section>\n\n                <section className=\"PostDetails__comments\">\n                  {\n                    isCommentsVisible\n                      ? (\n                        <>\n                          <button\n                            type=\"button\"\n                            className=\"button\"\n                            onClick={hideComments}\n                          >\n                            {`Hide ${comments.length} comments`}\n                          </button>\n\n                          <CommentList\n                            comments={comments}\n                            updateComments={loadComments}\n                          />\n                        </>\n                      )\n                      : (\n                        <button\n                          type=\"button\"\n                          className=\"button\"\n                          onClick={showComments}\n                        >\n                          {`Show ${comments.length} comments`}\n                        </button>\n                      )\n                  }\n\n                </section>\n\n                <section>\n                  <div className=\"PostDetails__form-wrapper\">\n                    <NewCommentForm\n                      postId={selectedPostId}\n                      updateComments={loadComments}\n                    />\n                  </div>\n                </section>\n              </>\n            )\n            : (\n              <h2>Post is unvaliable</h2>\n            )\n          )\n      }\n\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = (event) => {\n    setSelectedUserId(Number(event.target.value));\n  };\n\n  const openPost = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const closePost = () => {\n    setSelectedPostId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            openPost={openPost}\n            closePost={closePost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId\n              ? (\n                <PostDetails\n                  selectedPostId={selectedPostId}\n                />\n              )\n              : (\n                <h3>Select the post</h3>\n              )\n          }\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}