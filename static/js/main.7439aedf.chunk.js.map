{"version":3,"sources":["api/api.js","api/posts.js","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","api/coments.js","components/CommentList/CommentList.jsx","components/NewCommentForm/NewCommentForm.jsx","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["request","url","options","a","fetch","response","ok","Error","status","statusText","json","getUserPosts","userId","posts","data","filter","post","getPostDetail","postId","Loader","className","PostsList","openPost","selectedPostId","closePost","useState","setPosts","loading","setLoading","useEffect","loadPosts","useCallback","postsFromServer","map","key","id","title","type","onClick","getPostComments","comments","comment","deleteComment","commentId","commentUrl","method","addComment","name","email","body","headers","JSON","stringify","CommentList","updateComments","deletingCommentId","setDeletingComment","removeComment","NewCommentForm","setName","setEmail","setBody","addingComment","setAddingComment","handleSubmit","event","preventDefault","emailRegEx","test","onSubmit","placeholder","value","onChange","target","PostDetails","setPost","setComments","isCommentsVisible","setIsCommentVisible","loadPostDetails","loadComments","postFromServer","commentsFromServer","length","App","selectedUserId","setSelectedUserId","setSelectedPostId","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7439aedf.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, options) => {\n  const response = await fetch(`${BASE_URL}${url}`, options);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}-${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const remove = url => request(url, { method: 'DELETE' });\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts');\n\n  return (\n    userId !== 0\n      ? posts.data.filter(post => post.userId === userId)\n      : posts.data\n  );\n};\n\nexport const getPostDetail = async(postId) => {\n  const post = await request(`/posts/${postId}`);\n\n  return post.data;\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserPosts } from '../../api/posts';\nimport { Loader } from '../Loader';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  userId,\n  openPost,\n  selectedPostId,\n  closePost,\n}) => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    loadPosts();\n  }, [userId]);\n\n  const loadPosts = useCallback(async() => {\n    setLoading(true);\n    const postsFromServer = await getUserPosts(userId);\n\n    setPosts(postsFromServer);\n    setLoading(false);\n  }, [userId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {loading\n          ? (<Loader />)\n          : (\n            posts.map(post => (\n              <li\n                key={post.id}\n                className=\"PostsList__item\"\n              >\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {\n                  selectedPostId === post.id\n                    ? (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={closePost}\n                      >\n                        Close\n                      </button>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"PostsList__button button\"\n                        onClick={() => openPost(post.id)}\n                      >\n                        Open\n                      </button>\n                    )\n                }\n\n              </li>\n            ))\n          )\n\n        }\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  userId: PropTypes.number.isRequired,\n  openPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  closePost: PropTypes.func.isRequired,\n};\n","import { remove, request } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  return comments.data.filter(comment => comment.postId === postId);\n};\n\nexport const deleteComment = (commentId) => {\n  const commentUrl = `/comments/${commentId}`;\n\n  return remove(commentUrl, { medthod: 'DELETE' });\n};\n\nexport const addComment = (postId, name, email, body) => request('/comments', {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({\n    postId,\n    name,\n    email,\n    body,\n  }),\n});\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../Loader';\n\nimport { deleteComment } from '../../api/coments';\n\nexport const CommentList = ({ comments, updateComments }) => {\n  const [deletingCommentId, setDeletingComment] = useState(0);\n\n  const removeComment = async(commentId) => {\n    setDeletingComment(commentId);\n    await deleteComment(commentId);\n    await updateComments();\n    setDeletingComment(0);\n  };\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {comments.map(comment => (\n        <li\n          key={comment.id}\n          className=\"PostDetails__list-item\"\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => removeComment(comment.id)}\n          >\n            {deletingCommentId === comment.id\n              ? <Loader />\n              : 'X'\n            }\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      body: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Loader } from '../Loader';\n\nimport { addComment } from '../../api/coments';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, updateComments }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [addingComment, setAddingComment] = useState(false);\n\n  const handleSubmit = async(event) => {\n    event.preventDefault();\n    setAddingComment(true);\n    // eslint-disable-next-line max-len\n    const emailRegEx = /^(([^<>()\\\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    if (!name || !body || !emailRegEx.test(email)) {\n      setAddingComment(false);\n\n      return;\n    }\n\n    await addComment(postId, name, email, body);\n    await updateComments();\n    setBody('');\n    setAddingComment(false);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {addingComment && (<Loader />)}\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  updateComments: PropTypes.func.isRequired,\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getPostComments } from '../../api/coments';\nimport { getPostDetail } from '../../api/posts';\nimport { CommentList } from '../CommentList/CommentList';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isCommentsVisible, setIsCommentVisible] = useState(false);\n\n  useEffect(() => {\n    loadPostDetails();\n    loadComments();\n  }, [selectedPostId]);\n\n  const loadPostDetails = useCallback(async() => {\n    setLoading(true);\n    const postFromServer = await getPostDetail(selectedPostId);\n\n    setPost(postFromServer);\n    setLoading(false);\n  }, [selectedPostId]);\n\n  const loadComments = useCallback(async() => {\n    const commentsFromServer = await getPostComments(selectedPostId);\n\n    setComments(commentsFromServer);\n  }, [selectedPostId]);\n\n  const showComments = () => {\n    setIsCommentVisible(true);\n  };\n\n  const hideComments = () => {\n    setIsCommentVisible(false);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      {\n        loading && <Loader />\n      }\n      {\n        (post && !loading)\n          && (\n            <>\n              <h2>Post details:</h2>\n\n              <section className=\"PostDetails__post\">\n                <p>{post.title}</p>\n              </section>\n\n              <section className=\"PostDetails__comments\">\n                {\n                  isCommentsVisible\n                    ? (\n                      <>\n                        <button\n                          type=\"button\"\n                          className=\"button\"\n                          onClick={hideComments}\n                        >\n                          {`Hide ${comments.length} comments`}\n                        </button>\n\n                        <CommentList\n                          comments={comments}\n                          updateComments={loadComments}\n                        />\n                      </>\n                    )\n                    : (\n                      <button\n                        type=\"button\"\n                        className=\"button\"\n                        onClick={showComments}\n                      >\n                        {`Show ${comments.length} comments`}\n                      </button>\n                    )\n                }\n\n              </section>\n\n              <section>\n                <div className=\"PostDetails__form-wrapper\">\n                  <NewCommentForm\n                    postId={selectedPostId}\n                    updateComments={loadComments}\n                  />\n                </div>\n              </section>\n            </>\n          )\n      }\n      {\n        (!post && !loading)\n          && (<h2>Post is unvaliable</h2>)\n      }\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  const selectUser = (event) => {\n    setSelectedUserId(Number(event.target.value));\n  };\n\n  const openPost = (postId) => {\n    setSelectedPostId(postId);\n  };\n\n  const closePost = () => {\n    setSelectedPostId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={selectUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            userId={selectedUserId}\n            openPost={openPost}\n            closePost={closePost}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {\n            selectedPostId\n              ? (\n                <PostDetails\n                  selectedPostId={selectedPostId}\n                />\n              )\n              : (\n                <h3>Select the post</h3>\n              )\n          }\n\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}